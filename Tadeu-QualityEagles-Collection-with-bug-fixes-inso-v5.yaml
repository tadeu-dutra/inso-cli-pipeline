type: collection.insomnia.rest/5.0
name: Tadeu-QualityEagles-Collection
meta:
  id: wrk_0a4de9a27f6c41aaa6a586ba8749360f
  created: 1742444557991
  modified: 1742447169034
collection:
  - name: "[Tadeu] - Quality Eagles"
    meta:
      id: fld_639ad25d8685446fa75333d9c52ea7e7
      created: 1740367594888
      modified: 1742448925683
      sortKey: -1740367593459
    children:
      - name: Login de acesso
        meta:
          id: fld_f4719e4066744304b54f487c5622a154
          created: 1740367862875
          modified: 1742445698183
          sortKey: -1740367862876
        children:
          - url: "{{BaseUrl}}/api/login/"
            name: Login com e-mail inválido e senha válida
            meta:
              id: req_4b02580351294398bf209cb85e747878
              created: 1740367921550
              modified: 1740373893685
              isPrivate: false
              sortKey: -1740367921550
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "mail": "{{InvalidMail}}",
                  "password": "{{PasswordAdm}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Check response message', () => {
                	insomnia.expect('E-mail ou senha informados são inválidos.').to.equal(insomnia.response.json().alert);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/login/"
            name: "[BUG 20792 / Carol] Login com e-mail válido e senha em branco (BUG
              FIXED)"
            meta:
              id: req_05090465384143b8871bfdf1e26b223a
              created: 1740368450439
              modified: 1742445317885
              isPrivate: false
              sortKey: -1740367757503.5
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "mail": "{{MailAdm}}",
                  "password": ""
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              preRequest: // insomnia.execution.skipRequest()
              afterResponse: >-
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate response password message', () => {
                	insomnia.expect('O campo senha é obrigatório.').to.equal(insomnia.response.json().password);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/login/"
            name: "[BUG 21093 / Iza] Login com email em branco e senha em branco (BUG
              FIXED)"
            meta:
              id: req_a0237499a0864d8fac7ef92d4e78686f
              created: 1740369309177
              modified: 1742445328725
              isPrivate: false
              sortKey: -1740367675480.25
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "mail": "",
                  "password": ""
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              preRequest: // insomnia.execution.skipRequest()
              afterResponse: >-
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate response mail message', () => {
                	insomnia.expect('O campo e-mail é obrigatório.').to.equal(insomnia.response.json().mail);
                });


                insomnia.test('Validate response password message', () => {
                	insomnia.expect('O campo senha é obrigatório.').to.equal(insomnia.response.json().password);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/login/"
            name: Login com email invalido e senha invalida
            meta:
              id: req_753ad3a5f7934b59912b971526f7d3cd
              created: 1740370366064
              modified: 1740374045323
              isPrivate: false
              sortKey: -1740367634468.625
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "mail": "{{InvalidMail}}",
                  "password": "{{InvalidPassword}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate invalid data message', () => {
                	insomnia.expect('E-mail ou senha informados são inválidos.').to.equal(insomnia.response.json().alert);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/login/"
            name: Login com email valido e senha incorreta
            meta:
              id: req_71aa897237354df5945c2387d50e1f72
              created: 1740370558154
              modified: 1740374059935
              isPrivate: false
              sortKey: -1740367613962.8125
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "mail": "{{MailAdm}}",
                  "password": "{{InvalidPassword}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate invalid data message', () => {
                	insomnia.expect('E-mail ou senha informados são inválidos.').to.equal(insomnia.response.json().alert);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/login/"
            name: Login de acesso com sucesso
            meta:
              id: req_6b8cfb3b963c4e3abd6c20f839e518d2
              created: 1740370663781
              modified: 1742010760745
              isPrivate: false
              sortKey: -1740367603709.9062
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "mail": "{{MailAdm}}",
                  "password": "{{PasswordAdm}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 200", () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate invalid data message', () => {
                	insomnia.expect(insomnia.response.json().msg).contains("autenticação autorizada com sucesso");
                });


                insomnia.test('Validate response contains token', () => {
                    insomnia.expect(insomnia.response.json()).to.have.property('token');
                });


                insomnia.environment.set("TokenAdm", insomnia.response.json().token);
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Novo Cadastro de Usuário
        meta:
          id: fld_fbf1001b0ec1456cbd2ce4b8aa10b0cb
          created: 1740371141219
          modified: 1742445698701
          sortKey: -1740367728167
        children:
          - url: "{{BaseUrl}}/api/user/"
            name: "[BUG 21142 / Cleisson] Registrar usuário com sucesso (BUG FIXED)"
            meta:
              id: req_d7044f3b90df4e3297877f1a710432ca
              created: 1740371770978
              modified: 1742445336775
              isPrivate: false
              sortKey: -1740371778433
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "fullName": "{{FullName}}",
                  "mail": "{{MailUser}}",
                  "accessProfile": "ADMIN",
                  "cpf": "{{Cpf}}",
                  "password": "{{PasswordUser}}",
                  "confirmPassword": "{{PasswordUser}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              preRequest: >-
                // insomnia.execution.skipRequest()


                // Function to generate a random 11-digit number

                function generateRandom11DigitNumber() {
                    // Generate a random number between 0 and 10^11 - 1
                    let randomNumber = Math.floor(Math.random() * 1e11);

                    // Ensure that the number has 11 digits by padding with leading zeros if necessary
                    return String(randomNumber).padStart(11, '0');
                }


                // Generate the random number

                let random11DigitNumber = generateRandom11DigitNumber();


                // Set the number as an environment variable

                insomnia.environment.set("Cpf", random11DigitNumber);


                ////////////////////////////////////////////////////////////////


                function generateRandomLastname() {
                    // List of sample lastnames; you can customize this list with more options
                    const lastnames = [
                        "Smith", "Johnson", "Williams", "Jones", "Brown",
                        "Davis", "Miller", "Wilson", "Moore", "Taylor",
                        "Anderson", "Thomas", "Jackson", "White", "Harris",
                        "Martin", "Thompson", "Garcia", "Martinez", "Robinson"
                    ];

                    // Select a random lastname from the list
                    let randomLastname = lastnames[Math.floor(Math.random() * lastnames.length)];

                    // Ensure the first letter is capitalized
                    return randomLastname.charAt(0).toUpperCase() + randomLastname.slice(1).toLowerCase();
                }


                // Generate the random lastname

                let randomLastname = generateRandomLastname();


                // Set the lastname as an environment variable

                insomnia.environment.set("LastName", randomLastname);


                // Log the lastname to the console for verification

                console.log("Generated Random Last name:", randomLastname);


                // Function to generate a random first name

                function generateRandomFirstName() {
                    // List of sample first names; you can customize this list with more options
                    const firstNames = [
                        "James", "Mary", "John", "Patricia", "Robert",
                        "Jennifer", "Michael", "Linda", "William", "Elizabeth",
                        "David", "Barbara", "Richard", "Susan", "Joseph",
                        "Jessica", "Thomas", "Sarah", "Charles", "Karen"
                    ];

                    // Select a random first name from the list
                    let randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];

                    // Ensure the first letter is capitalized
                    return randomFirstName.charAt(0).toUpperCase() + randomFirstName.slice(1).toLowerCase();
                }


                // Generate the random first name

                let randomFirstName = generateRandomFirstName();


                // Set the first name as an environment variable

                insomnia.environment.set("FirstName", randomFirstName);


                // Log the first name to the console for verification

                console.log("Generated Random First Name:", randomFirstName);


                insomnia.environment.set("FullName", insomnia.environment.get("FirstName") + " " + insomnia.environment.get("LastName"));

                insomnia.environment.set("MailUser", insomnia.environment.get('FullName').toLowerCase().replace(/\s/g, "").normalize("NFD").replace(/[\u0300-\u036f]/g, "") + '@qacoders.com.br');

                //////////////////////////////////////////////////////////////


                function generatePassword() {

                    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%";

                    const comprimentoMinimo = 8;

                    const comprimentoMaximo = 12;

                    let senhaArray = [];

                 

                    senhaArray.push(chars[Math.floor(Math.random() * 26)]); 

                    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); 

                    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); 

                    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); 

                    

                    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);

                    

                    for (let i = 0; i < comprimentoRestante; i++) {

                        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);

                    }

                    return shuffleString(senhaArray.join(""));

                }


                function shuffleString(string) {

                  return string.split("").sort(() => Math.random() - 0.5).join("");

                }


                insomnia.environment.set("PasswordUser", generatePassword());
              afterResponse: >
                insomnia.test('Status code is 201', () => {
                    insomnia.response.to.have.status(201);
                });


                insomnia.test('Validate name', () => {
                    insomnia.expect(insomnia.response.json().user).to.have.property('fullName');
                });


                insomnia.test('Validate mail', () => {
                    insomnia.expect(insomnia.response.json().user).to.have.property('mail');
                });


                insomnia.environment.set('IdUser', insomnia.response.json().user._id);

                insomnia.environment.set('MailUser', insomnia.response.json().user.mail);
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/"
            name: Registar usuário com email inválido
            meta:
              id: req_617949accce74700b9707d75a6b7f972
              created: 1740373817775
              modified: 1742448188177
              isPrivate: false
              sortKey: -1740369849991.5
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "fullName": "{{FullName}}",
                  "mail": "{{InvalidMail}}",
                  "accessProfile": "ADMIN",
                  "cpf": "{{Cpf}}",
                  "password": "{{PasswordUser}}",
                  "confirmPassword": "{{PasswordUser}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate invalid email', () => {
                	insomnia.expect('O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].').to.equal(insomnia.response.json().error[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/"
            name: Registrar Usuário com CPF em branco
            meta:
              id: req_1ae2d830aca242f38da5fabcd554a981
              created: 1740374443495
              modified: 1740374511170
              isPrivate: false
              sortKey: -1740369849891.5
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "fullName": "{{FullName}}",
                  "mail": "{{MailUser}}",
                  "accessProfile": "ADMIN",
                  "cpf": "",
                  "password": "{{PasswordUser}}",
                  "confirmPassword": "{{PasswordUser}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate invalid email', () => {
                	insomnia.expect('O campo CPF é obrigatório!').to.equal(insomnia.response.json().error[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/login/"
            name: Login de acesso com sucesso (user)
            meta:
              id: req_d5a5e223f0d545389652c746cd1fe156
              created: 1740375746630
              modified: 1742010787813
              isPrivate: false
              sortKey: -1740369849791.5
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "mail": "{{MailUser}}",
                  "password": "{{PasswordUser}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 200", () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate invalid data message', () => {
                	insomnia.expect(insomnia.response.json().msg).contains("autenticação autorizada com sucesso");
                });


                insomnia.test('Validate response contains token', () => {
                    insomnia.expect(insomnia.response.json()).to.have.property('token');
                });


                insomnia.environment.set("TokenUser", insomnia.response.json().token);
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Lista de Cadastro de Usuários
        meta:
          id: fld_88e8631481144e2fa14b419113333024
          created: 1740375178073
          modified: 1742445701180
          sortKey: -1740367660812.5
        children:
          - url: "{{BaseUrl}}/api/user/count"
            name: Contagem de usuário com sucesso
            meta:
              id: req_96a6bd59f480415f93fd130603451bb2
              created: 1740375513152
              modified: 1742008282912
              isPrivate: false
              sortKey: -1740375521821
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: "insomnia.test(\"Status code is 200\", function () {\r

                \    insomnia.response.to.have.status(200);\r

                });\r

                \r

                insomnia.test('Verify property cont exist', ()
                => {\r

                \    insomnia.expect(insomnia.response.json().c\
                ount).to.exist;\r

                });"
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/count"
            name: Contagem de usuários com o token inválido
            meta:
              id: req_6fb3169d28ba48978fc78aea6a559b18
              created: 1740375875230
              modified: 1740376080349
              isPrivate: false
              sortKey: -1740373650127
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{InvalidToken}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test("Status code is 403", function () {
                    insomnia.response.to.have.status(403);
                });


                insomnia.test('Verify property count not exist', () => {
                    insomnia.expect(insomnia.response.json().count).not.to.exist;
                });


                insomnia.test('Validate invalid token', () => {
                	insomnia.expect('Failed to authenticate token.').to.equal(insomnia.response.json().errors[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/count"
            name: Contagem de usuários sem token
            meta:
              id: req_99df9915cd76407b95fa2e7e8656bf7b
              created: 1740376105862
              modified: 1740376138707
              isPrivate: false
              sortKey: -1740372714280
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{InvalidToken}}"
              addTo: header
              disabled: true
            scripts:
              afterResponse: >
                insomnia.test("Status code is 403", function () {
                    insomnia.response.to.have.status(403);
                });


                insomnia.test('Verify property count not exist', () => {
                    insomnia.expect(insomnia.response.json().count).not.to.exist;
                });


                insomnia.test('Validate no token provided', () => {
                	insomnia.expect('No token provided.').to.equal(insomnia.response.json().errors[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{IdUser}}"
            name: Listar Usuário por ID acesso negado
            meta:
              id: req_2cc4250b6b8d44caa5971334b6a34953
              created: 1740376199727
              modified: 1740376497564
              isPrivate: false
              sortKey: -1740372246356.5
            method: GET
            authentication:
              type: apikey
              key: Authorization
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test("Status code is 403", function () {
                    insomnia.response.to.have.status(403);
                });


                insomnia.test('Validate empty token', () => {
                	insomnia.expect('No token provided.').to.equal(insomnia.response.json().errors[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{IdUser}}"
            name: Listar usuário por ID com sucesso
            meta:
              id: req_7e36a59d64e64652881002f9ac0f13b7
              created: 1740376265450
              modified: 1742006317121
              isPrivate: false
              sortKey: -1740372012394.75
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate user id matches', () => {
                	insomnia.expect(insomnia.environment.get("IdUser")).to.equal(insomnia.response.json()._id);
                });


                insomnia.test('Validate user mail matches', () => {
                	insomnia.expect(insomnia.environment.get("MailUser")).to.equal(insomnia.response.json().mail);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user"
            name: Listar usuários com sucesso
            meta:
              id: req_33c920ec9d6c4a178beca01e2c113904
              created: 1740376537705
              modified: 1742009110391
              isPrivate: false
              sortKey: -1740371895413.875
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                // insomnia.test('Validate response contains an array list', () => {

                // 	insomnia.expect(Array.isArray(insomnia.response.json())).to.be.true;

                // });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{InvalidIdUser}}"
            name: Listar Usuário por ID não encontrado
            meta:
              id: req_557a89438feb4009989c43eec406ebb7
              created: 1740376785493
              modified: 1740377027115
              isPrivate: false
              sortKey: -1740371953904.3125
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test("Status code is 404", function () {
                    insomnia.response.to.have.status(404);
                });


                insomnia.test('Validate invalid data message', () => {
                	insomnia.expect('Esse usuário não existe em nossa base de dados.').to.equal(insomnia.response.json().alert[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Editar Cadastro de Usuário
        meta:
          id: fld_092a5458beaf4e0bb94f2549055cde42
          created: 1740377104765
          modified: 1742445701645
          sortKey: -1740367627135.25
        children:
          - url: "{{BaseUrl}}/api/user/status/{{IdUser}}"
            name: Editar status por id do usuário para false
            meta:
              id: req_51b61d7ca0754181be62996ecdc17296
              created: 1740377357226
              modified: 1740378214218
              isPrivate: false
              sortKey: -1740377363820
            method: PUT
            body:
              mimeType: application/json
              text: "{\r\n  \"status\": false\r\n}"
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test('Status code is 200', () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate response message', () => {
                    insomnia.expect('Status do usuario atualizado com sucesso para status false.').to.be.equal(insomnia.response.json().msg);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/status/{{IdUser}}"
            name: Editar status por id do usuário para true
            meta:
              id: req_12669e9ad7304e38a899465462d6d491
              created: 1740377660048
              modified: 1740378209679
              isPrivate: false
              sortKey: -1740376442820.5
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                  "status": true
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test('Status code is 200', () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate response message', () => {
                    insomnia.expect('Status do usuario atualizado com sucesso para status true.').to.be.equal(insomnia.response.json().msg);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/status/{{IdUser}}"
            name: Editar status por id do usuário para undefined
            meta:
              id: req_36fa31b3a6f54b049b11184eacf844f0
              created: 1740377709318
              modified: 1740378204095
              isPrivate: false
              sortKey: -1740375982320.75
            method: PUT
            body:
              mimeType: application/json
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test('Status code is 200', () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate response message', () => {
                    insomnia.expect('Status do usuario atualizado com sucesso para status undefined.').to.be.equal(insomnia.response.json().msg);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{IdUser}}"
            name: Editar usuário por Id com fullName em branco
            meta:
              id: req_9202c0e0f355427985cc683b524e4315
              created: 1740377802025
              modified: 1740378199374
              isPrivate: false
              sortKey: -1740375752070.875
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                	"fullName": "",
                	"mail": "{{MailUser}}" 
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test('Status code is 400', () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate response message', () => {
                    insomnia.expect('O campo nome completo é obrigatório.').to.be.equal(insomnia.response.json().error[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{IdUser}}"
            name: Editar usuário por Id com mail inválido
            meta:
              id: req_0ef8b11788374043bd32e4c919a6259c
              created: 1740377983948
              modified: 1740378194236
              isPrivate: false
              sortKey: -1740375636945.9375
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                	"fullName": "{{FullName}}",
                	"mail": "{{InvalidMail}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test('Status code is 400', () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate response message', () => {
                    insomnia.expect('O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].').to.be.equal(insomnia.response.json().error[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{IdUser}}"
            name: Editar usuário por Id com sucesso
            meta:
              id: req_a1c1f795d44948d5a89e00093a50315f
              created: 1740378113691
              modified: 1740378187647
              isPrivate: false
              sortKey: -1740375579383.4688
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                	"fullName": "{{FullName}}",
                	"mail": "{{MailUser}}"
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test('Status code is 200', () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate response message', () => {
                    insomnia.expect('Dados atualizados com sucesso!').to.be.equal(insomnia.response.json().msg);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Excluir Cadastro de Usuário
        meta:
          id: fld_2822b0d0cd50414fbd863cf1543aa686
          created: 1740377162642
          modified: 1742445701841
          sortKey: -1740367610296.625
        children:
          - url: "{{BaseUrl}}/api/user/{{IdUser}}"
            name: Excluir Cadastro de Usuário com Sucesso
            meta:
              id: req_fd3a4fb9f326486597b257ae4f406973
              created: 1740378259929
              modified: 1740378335415
              isPrivate: false
              sortKey: -1740378268226
            method: DELETE
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test('Status code is 200', () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate user deletion', () => {
                    insomnia.expect(insomnia.response.json().msg).to.equal('Usuário deletado com sucesso!.')
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{InvalidIdUser}}"
            name: Excluir Cadastro de Usuário inexistente
            meta:
              id: req_13a74acef31f43f9afc72687853326ed
              created: 1740378385839
              modified: 1740378566031
              isPrivate: false
              sortKey: -1740378268126
            method: DELETE
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >-
                insomnia.test('status code is 400', () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate user deletion', () => {
                    insomnia.expect(insomnia.response.json().alert[0]).to.equal('Esse usuário não existe em nossa base de dados.')
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/user/{{IdUser}}"
            name: Excluir Cadastro de Usuário sem autorização
            meta:
              id: req_704e57d108ab43f78a4514a6bc5eb00a
              created: 1740378598847
              modified: 1740378680883
              isPrivate: false
              sortKey: -1740378268026
            method: DELETE
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenAdm}}"
              addTo: header
              disabled: true
            scripts:
              afterResponse: >
                insomnia.test('Status code is 403', () => {
                    insomnia.response.to.have.status(403);
                });


                insomnia.test('Validate no token provided', () => {
                    insomnia.expect(insomnia.response.json().errors[0]).to.equal('No token provided.')
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Novo Cadastro de Empresa
        meta:
          id: fld_93645d4077314e22b60ca1e15513414a
          created: 1740378732377
          modified: 1742445702167
          sortKey: -1740367601877.3125
        children:
          - url: "{{BaseUrl}}/api/company"
            name: "[BUG 21425 / Lucas] Nome da Empresa - Campo obrigatório (BUG FIXED)"
            meta:
              id: req_a993e31c708a445291e757a2ccfc5b6a
              created: 1740379533181
              modified: 1742448554707
              isPrivate: false
              sortKey: -1740379533181
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "zipCode": "04777001",
                      "city": "São Paulo",
                      "state": "SP",
                      "district": "Rua das Flores",
                      "street": "Avenida Interlagos",
                      "number": "50",
                      "complement": "de 4503 ao fim - lado ímpar",
                      "country": "Brasil"
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              preRequest: >-
                // insomnia.execution.skipRequest()


                // Function to generate a random 14-digit number

                function generateRandomDigitNumber() {
                    // Generate a random number between 0 and 10^11 - 1
                    let randomNumber = Math.floor(Math.random() * 1e14);

                    // Ensure that the number has 11 digits by padding with leading zeros if necessary
                    return String(randomNumber).padStart(14, '0');
                }


                // Generate the random number

                let randomDigitNumber = generateRandomDigitNumber();


                // Set the number as an environment variable

                insomnia.environment.set("Cnpj", randomDigitNumber);


                ////////////////////////////////////////////////////////////////
              afterResponse: >
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate corporate name is empty', () => {
                	insomnia.expect('O campo \'Nome da empresa\' da empresa é obrigatório').to.equal(insomnia.response.json().error[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company"
            name: Nome da empresa - Nome com 101 caracteres
            meta:
              id: req_a7c6f87952e149c28a1294100789edbb
              created: 1740380142030
              modified: 1740380827281
              isPrivate: false
              sortKey: -1740378900703.5
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "{{TooLongString}}",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "zipCode": "04777001",
                      "city": "São Paulo",
                      "state": "SP",
                      "district": "Rua das Flores",
                      "street": "Avenida Interlagos",
                      "number": "50",
                      "complement": "de 4503 ao fim - lado ímpar",
                      "country": "Brasil"
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              preRequest: >-
                // Função para gerar uma string aleatória de um comprimento
                específico

                function generateRandomString(length) {
                    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                    let result = '';
                    for (let i = 0; i < length; i++) {
                        const randomIndex = Math.floor(Math.random() * characters.length);
                        result += characters.charAt(randomIndex);
                    }
                    return result;
                }


                // Gerar a string de 101 caracteres

                let randomString101 = generateRandomString(101);


                // Configurar a string como uma variável de ambiente

                insomnia.environment.set("TooLongString", randomString101);


                // Log da string para verificação

                console.log("Generated 101-character String:", randomString101);


                ////////////////////////////////////////////////////////////////
              afterResponse: >
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate corporate name is more than 100 characteres', () => {
                	insomnia.expect('O campo \'Nome da empresa\' deve ter no máximo 100 caracteres.').to.equal(insomnia.response.json().error[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company"
            name: Nome da empresa - Teste de Duplicidade
            meta:
              id: req_1a5f53b0ea494ac29581bc43c8715d4c
              created: 1740380430801
              modified: 1740380879172
              isPrivate: false
              sortKey: -1740378584464.75
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "test",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "zipCode": "04777001",
                      "city": "São Paulo",
                      "state": "SP",
                      "district": "Rua das Flores",
                      "street": "Avenida Interlagos",
                      "number": "50",
                      "complement": "de 4503 ao fim - lado ímpar",
                      "country": "Brasil"
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              afterResponse: >
                insomnia.test("Status code is 400", () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate corporate name is empty', () => {
                	insomnia.expect('Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.').to.equal(insomnia.response.json().alert[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company"
            name: Novo Cadastro de Empresa
            meta:
              id: req_02baeb59922146eeb723923a81f606e1
              created: 1740380628925
              modified: 1742011503527
              isPrivate: false
              sortKey: -1740378742584.125
            method: POST
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "test",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "zipCode": "04777001",
                      "city": "São Paulo",
                      "state": "SP",
                      "district": "Rua das Flores",
                      "street": "Avenida Interlagos",
                      "number": "50",
                      "complement": "de 4503 ao fim - lado ímpar",
                      "country": "Brasil"
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              preRequest: >
                // Function to generate a random 14-digit number

                function generateRandomDigitNumber() {
                    // Generate a random number between 0 and 10^11 - 1
                    let randomNumber = Math.floor(Math.random() * 1e14);

                    // Ensure that the number has 11 digits by padding with leading zeros if necessary
                    return String(randomNumber).padStart(14, '0');
                }


                // Generate the random number

                let randomDigitNumber = generateRandomDigitNumber();


                // Set the number as an environment variable

                insomnia.environment.set("Cnpj", randomDigitNumber);


                ////////////////////////////////////////////////////////////////
              afterResponse: >-
                insomnia.test("Status code is 201", () => {
                    insomnia.response.to.have.status(201);
                });


                insomnia.test('Validate company creation', () => {
                	insomnia.expect('Olá a companhia true foi cadastrada com sucesso.').to.equal(insomnia.response.json().msg);
                });


                insomnia.environment.set('IdCompany', insomnia.response.json().newCompany._id);
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Lista Cadastro de Empresa
        meta:
          id: fld_8b4c553973784f30b566754ed17528c3
          created: 1740378774436
          modified: 1742445703322
          sortKey: -1740367597668.1562
        children:
          - url: "{{BaseUrl}}/api/company"
            name: Lista Cadastro de Empresa
            meta:
              id: req_05ad3ea98e6b4d6791e6bb4ddd6851ca
              created: 1740381024686
              modified: 1740381055115
              isPrivate: false
              sortKey: -1740381044709
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate response contains an array list', () => {
                	insomnia.expect(Array.isArray(insomnia.response.json())).to.be.true;
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Editar dados de Endereço da Empresa
        meta:
          id: fld_f3508031fed3479383de867261473a34
          created: 1740378797733
          modified: 1742445703632
          sortKey: -1740367595563.5781
        children:
          - url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
            name: Editar dados de Endereço da Empresa com campo nome tendo mais caracteres
              que o limite definido
            meta:
              id: req_a2355266b3404ad582f06ad51f98a812
              created: 1740381168870
              modified: 1742445387266
              isPrivate: false
              sortKey: -1740381177717
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "test",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "zipCode": "04777001",
                      "city": "São Paulo",
                      "state": "SP",
                      "district": "Rua das Flores",
                      "street": "Avenida Interlagos",
                      "number": "11188811199",
                      "complement": "de 4503 ao fim - lado ímpar",
                      "country": "Brasil"
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test('Status code is 400', () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate corporate address number is more than 10 characteres', () => {
                	insomnia.expect('"O campo \'número\' deve possuir no máximo 10 caracteres.').contains(insomnia.response.json().error[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
            name: Editar dados de Endereço da Empresa com campos obrigatórios em branco
            meta:
              id: req_fa794bcae7234f4e9e2aa6a4e6891dd1
              created: 1740382349795
              modified: 1740416095623
              isPrivate: false
              sortKey: -1740381111213
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "test",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "zipCode": "",
                      "city": "",
                      "state": "",
                      "district": "",
                      "street": "",
                      "number": "",
                      "complement": "",
                      "country": ""
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test('Status code is 400', () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate corporate address number is more than 10 characteres', () => {
                	insomnia.expect(insomnia.response.json().error[0]).contains('O campo \'CEP\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[1]).contains('O campo País é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[2]).contains('O campo \'cidade\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[3]).contains('O campo \'estado\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[4]).contains('O campo \'bairro\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[5]).contains('O campo \'logradouro\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[6]).contains('O campo \'número\' é obrigatório.');
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
            name: "[BUG 21338 / Ítalo] Editar dados de Endereço da Empresa com Sucesso (BUG
              FIXED)"
            meta:
              id: req_daa31c60dd7a4aa8b1c62193b6cbaa39
              created: 1740382693560
              modified: 1742445398541
              isPrivate: false
              sortKey: -1740381111113
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "test",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "zipCode": "{{randomZipCode}}",
                      "city": "{{randomCity}}",
                      "state": "{{randomState}}",
                      "district": "{{randomDistrict}}",
                      "street": "{{randomStreet}}",
                      "number": "{{randomNumber}}",
                      "complement": "{{randomAddressComplement}}",
                      "country": "{{randomCountry}}"
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              preRequest: >-
                // insomnia.execution.skipRequest()


                // Function to generate a random zip code with exactly 8 digits

                function generateRandomZipCode() {
                    const minValue = 10000000; // Minimum 8-digit number
                    const maxValue = 99999999; // Maximum 8-digit number
                    
                    // Generate a random number between minValue and maxValue
                    const randomZipCode = Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;
                    return randomZipCode.toString();
                }


                // Generate the random zip code

                let randomZipCode = generateRandomZipCode();


                // Set the random zip code as an environment variable

                insomnia.environment.set("randomZipCode", randomZipCode);


                // Log the zip code to the console for verification

                console.log("Generated Random Zip Code:", randomZipCode);


                ////////////////////////////////////////////////////////////////////////////////////////


                // List of sample city names; you can customize this list with more options

                const cities = [
                    "New York", "Los Angeles", "Chicago", "Houston", "Phoenix",
                    "Philadelphia", "San Antonio", "San Diego", "Dallas", "San Jose",
                    "Austin", "Jacksonville", "Fort Worth", "Columbus", "Charlotte",
                    "San Francisco", "Indianapolis", "Seattle", "Denver", "Washington"
                ];


                // Function to select a random city from the list

                function getRandomCity() {
                    const randomIndex = Math.floor(Math.random() * cities.length);
                    return cities[randomIndex];
                }


                // Generate the random city name

                let randomCity = getRandomCity();


                // Set the random city name as an environment variable

                insomnia.environment.set("randomCity", randomCity);


                // Log the city name to the console for verification

                console.log("Generated Random City:", randomCity);


                ////////////////////////////////////////////////////////////////////////////////////////


                // List of Brazilian states by their abbreviations

                const states = [
                    "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA",
                    "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN",
                    "RS", "RO", "RR", "SC", "SP", "SE", "TO"
                ];


                // Function to select a random state from the list

                function getRandomState() {
                    const randomIndex = Math.floor(Math.random() * states.length);
                    return states[randomIndex];
                }


                // Generate the random state

                let randomState = getRandomState();


                // Set the random state as an environment variable

                insomnia.environment.set("randomState", randomState);


                // Log the state to the console for verification

                console.log("Generated Random Brazilian State:", randomState);


                ////////////////////////////////////////////////////////////////////////////////////////


                // List of sample district names; customize this list with relevant district names

                const districts = [
                    "Downtown", "Uptown", "West End", "East Side", "Northfield",
                    "South Park", "Old Town", "New City", "Lakeside", "Hilltop",
                    "Riverbend", "Greenfield", "Meadowlands", "Brookside", "Sunnyvale"
                ];


                // Function to select a random district from the list

                function getRandomDistrict() {
                    const randomIndex = Math.floor(Math.random() * districts.length);
                    return districts[randomIndex];
                }


                // Generate the random district name

                let randomDistrict = getRandomDistrict();


                // Set the random district name as an environment variable

                insomnia.environment.set("randomDistrict", randomDistrict);


                // Log the district name to the console for verification

                console.log("Generated Random District:", randomDistrict);


                ////////////////////////////////////////////////////////////////////////////////////////


                // List of sample street names; you can customize this list with relevant street names

                const streets = [
                    "Main Street", "High Street", "Broadway", "Maple Avenue", "Elm Street",
                    "Oak Street", "Pine Street", "Cedar Avenue", "Sunset Boulevard", "Park Lane",
                    "5th Avenue", "6th Avenue", "7th Avenue", "8th Avenue", "9th Avenue",
                    "1st Street", "2nd Street", "3rd Street", "4th Street", "Hill Street"
                ];


                // Function to select a random street from the list

                function getRandomStreet() {
                    const randomIndex = Math.floor(Math.random() * streets.length);
                    return streets[randomIndex];
                }


                // Generate the random street name

                let randomStreet = getRandomStreet();


                // Set the random street name as an environment variable

                insomnia.environment.set("randomStreet", randomStreet);


                // Log the street name to the console for verification

                console.log("Generated Random Street:", randomStreet);


                ////////////////////////////////////////////////////////////////////////////////////////


                // Function to generate a random number with fewer than 10 digits

                function generateRandomNumber(maxDigits) {
                    // Calculate the maximum value for the given number of digits
                    const maxValue = Math.pow(10, maxDigits) - 1;
                    
                    // Generate a random number between 0 and maxValue
                    return Math.floor(Math.random() * (maxValue + 1));
                }


                // Set the maximum number of digits (less than 10)

                const maxDigits = 9; // Change this value if you want fewer digits


                // Generate the random number

                let randomNumber = generateRandomNumber(maxDigits);


                // Set the random number as an environment variable

                insomnia.environment.set("randomNumber", randomNumber);


                // Log the random number to the console for verification

                console.log("Generated Random Number:", randomNumber);


                ////////////////////////////////////////////////////////////////////////////////////////


                // List of sample address complements; customize this list with relevant options

                const addressComplements = [
                    "Apt. 101", "Suite 202", "Floor 3", "Building A", "Unit B12",
                    "Penthouse", "Room 404", "Basement", "Annex", "Rear Entrance",
                    "Front Desk", "Mailbox 5", "Gate 2", "Lot 15", "Tower 3",
                    "Block C", "Wing East", "Section 8", "Cabin 12", "Cottage"
                ];


                // Function to select a random address complement from the list

                function getRandomAddressComplement() {
                    const randomIndex = Math.floor(Math.random() * addressComplements.length);
                    return addressComplements[randomIndex];
                }


                // Generate the random address complement

                let randomAddressComplement = getRandomAddressComplement();


                // Set the random address complement as an environment variable

                insomnia.environment.set("randomAddressComplement", randomAddressComplement);


                // Log the address complement to the console for verification

                console.log("Generated Random Address Complement:", randomAddressComplement);


                ////////////////////////////////////////////////////////////////////////////////////////


                // List of sample country names; you can customize this list with more options

                const countries = [
                    "United States", "Canada", "Brazil", "United Kingdom", "Germany",
                    "France", "Australia", "India", "China", "Japan",
                    "Mexico", "Italy", "Spain", "Russia", "South Africa",
                    "Argentina", "New Zealand", "Netherlands", "Sweden", "Norway"
                ];


                // Function to select a random country from the list

                function getRandomCountry() {
                    const randomIndex = Math.floor(Math.random() * countries.length);
                    return countries[randomIndex];
                }


                // Generate the random country name

                let randomCountry = getRandomCountry();


                // Set the random country name as an environment variable

                insomnia.environment.set("randomCountry", randomCountry);


                // Log the country name to the console for verification

                console.log("Generated Random Country:", randomCountry);
              afterResponse: >
                insomnia.test('Status code is 200', () => {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate response message', () => {
                	insomnia.expect('Endereço da companhia atualizado com sucesso.').to.equal(insomnia.response.json().msg);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company/address/{{IdCompany}}"
            name: Editar dados de Endereço da Empresa sem informar campos obrigatórios
            meta:
              id: req_08b56923f5754621bb314358ba136dea
              created: 1740383707850
              modified: 1740416112888
              isPrivate: false
              sortKey: -1740381111013
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                  "corporateName": "test",
                  "registerCompany": "{{Cnpj}}",
                  "mail": "test@test.com",
                  "matriz": "Teste",
                  "responsibleContact": "Marcio",
                  "telephone": "99999999999999",
                  "serviceDescription": "Testes",
                  "address": [
                    {
                      "complement": ""
                    }
                  ]
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
              disabled: false
            scripts:
              afterResponse: >
                insomnia.test('Status code is 400', () => {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate corporate address number is more than 10 characteres', () => {
                	insomnia.expect(insomnia.response.json().error[0]).contains('O campo \'CEP\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[1]).contains('O campo País é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[2]).contains('O campo \'cidade\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[3]).contains('O campo \'estado\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[4]).contains('O campo \'bairro\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[5]).contains('O campo \'logradouro\' é obrigatório.');
                	insomnia.expect(insomnia.response.json().error[6]).contains('O campo \'número\' é obrigatório.');
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Contagem de Empresas
        meta:
          id: fld_89c495de5c73483095dc1bbbd396cb89
          created: 1740378825338
          modified: 1742445703754
          sortKey: -1740367594511.289
        children:
          - url: "{{BaseUrl}}/api/company/count"
            name: Count Empresas
            meta:
              id: req_b784754cfd904623bb6909c0e01f02d3
              created: 1740385607011
              modified: 1740386071018
              isPrivate: false
              sortKey: -1740385607011
            method: GET
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              afterResponse: |-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });

                insomnia.test('Verify property cont exist', () => {
                    insomnia.expect(insomnia.response.json().count).to.exist;
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company/count"
            name: Sem Token de Autentificacão
            meta:
              id: req_9608cda8593341359ba231f73b957afc
              created: 1740385985219
              modified: 1740386035473
              isPrivate: false
              sortKey: -1740385606911
            method: GET
            authentication:
              type: apikey
              key: Authorization
              value: "{{InvalidToken}}"
              addTo: header
              disabled: true
            scripts:
              afterResponse: >
                insomnia.test("Status code is 403", function () {
                    insomnia.response.to.have.status(403);
                });


                insomnia.test('Verify property count not exist', () => {
                    insomnia.expect(insomnia.response.json().count).not.to.exist;
                });


                insomnia.test('Validate no token provided', () => {
                	insomnia.expect('No token provided.').to.equal(insomnia.response.json().errors[0]);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Consultar empresa por ID
        meta:
          id: fld_9b34b466e8d84f898050b4b641a526bf
          created: 1740378841748
          modified: 1742448925683
          sortKey: -1740367593985.1445
        children:
          - url: "{{BaseUrl}}/api/company/{{InvalidIdCompany}}"
            name: Consultar empresa por ID incorreto
            meta:
              id: req_d82db4e7d706437d95b7680c6665b91b
              created: 1740410564436
              modified: 1740411369352
              isPrivate: false
              sortKey: -1740391847294
            method: GET
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              afterResponse: >-
                insomnia.test("Status code is 400", function () {
                    insomnia.response.to.have.status(400);
                });


                insomnia.test('Validate company does not exist', () => {
                	insomnia.expect('Essa companhia não existe em nosso sistema.').contains(insomnia.response.json().alert);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company/{{IdCompany}}"
            name: "[BUG 21364 / Carol] Consultar empresa por ID com sucesso (BUG FIXED)"
            meta:
              id: req_4adff12619bb4dafbc5f67575c7ce5a0
              created: 1740411046198
              modified: 1742448923733
              isPrivate: false
              sortKey: -1740391847394
            method: GET
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              preRequest: // insomnia.execution.skipRequest()
              afterResponse: >-
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate user id matches', () => {
                	insomnia.expect(insomnia.environment.get("IdCompany")).to.equal(insomnia.response.json()._id);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Atualizar o Status da Empresa
        meta:
          id: fld_a14a526bb01d4193ae0e5b98839ecb09
          created: 1740378860131
          modified: 1742445704047
          sortKey: -1740367593722.0723
        children:
          - url: "{{BaseUrl}}/api/company/status/{{IdCompany}}"
            name: "[BUG 21955 / Tadeu] Editar status de uma empresa para false"
            meta:
              id: req_0ed1e17177b9422ab57a1e2c79325d9c
              created: 1740410821286
              modified: 1742445717633
              isPrivate: false
              sortKey: -1740411549036
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                  "status": false
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              preRequest: // insomnia.execution.skipRequest()
              afterResponse: >
                // insomnia.test("Status code is 200", function () {

                //     insomnia.response.to.have.status(200);

                // });


                insomnia.test('Validate company status is false', () => {
                	insomnia.expect(insomnia.response.json().updateCompany.status).to.equal(false);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company/status/{{IdCompany}}"
            name: "[BUG 21957 / Tadeu] Editar status de uma empresa para true"
            meta:
              id: req_a1d12bdb5c774120980cb817ea27dd09
              created: 1740412582744
              modified: 1742445728851
              isPrivate: false
              sortKey: -1740401698215
            method: PUT
            body:
              mimeType: application/json
              text: |-
                {
                  "status": true
                }
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              preRequest: // insomnia.execution.skipRequest()
              afterResponse: >-
                // insomnia.test("Status code is 200", function () {

                //     insomnia.response.to.have.status(200);

                // });


                insomnia.test('Validate company status is false', () => {
                	insomnia.expect(insomnia.response.json().updateCompany.status).to.equal(true);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
      - name: Excluir Cadastro de Empresa
        meta:
          id: fld_2d6ee391a88a490e9b322079b19ef35a
          created: 1740378879706
          modified: 1742445704174
          sortKey: -1740367593590.5361
        children:
          - url: "{{BaseUrl}}/api/company/{{IdCompany}}"
            name: Excluir Cadastro de Empresa com Sucesso
            meta:
              id: req_9cd001ead60e466f8ff3276c814c9ef1
              created: 1740412726011
              modified: 1740412848126
              isPrivate: false
              sortKey: -1740412728652
            method: DELETE
            body:
              mimeType: application/json
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              afterResponse: >
                insomnia.test("Status code is 200", function () {
                    insomnia.response.to.have.status(200);
                });


                insomnia.test('Validate company deletion', () => {
                	insomnia.expect('Companhia deletado com sucesso.').to.equal(insomnia.response.json().msg);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
          - url: "{{BaseUrl}}/api/company/{{InvalidIdCompany}}"
            name: Cadastro de Empresa com ID Inválido
            meta:
              id: req_dee512bf216d4255a695827fd8cde2ca
              created: 1740412878645
              modified: 1740412936649
              isPrivate: false
              sortKey: -1740412138844
            method: DELETE
            body:
              mimeType: application/json
            headers:
              - name: Content-Type
                value: application/json
            authentication:
              type: apikey
              disabled: false
              key: Authorization
              value: "{{TokenUser}}"
              addTo: header
            scripts:
              afterResponse: >
                insomnia.test("Status code is 404", function () {
                    insomnia.response.to.have.status(404);
                });


                insomnia.test('Validate company deletion', () => {
                	insomnia.expect('Essa companhia não existem em nossa base de dados.').to.equal(insomnia.response.json().msg);
                });
            settings:
              renderRequestBody: true
              encodeUrl: true
              followRedirects: global
              cookies:
                send: true
                store: true
              rebuildPath: true
cookieJar:
  name: Default Jar
  meta:
    id: jar_156a6470185741edbb5f48336fb1cb32
    created: 1740367631056
    modified: 1742448925673
environments:
  name: Base Environment
  meta:
    id: env_90873b233927459aacce265de89b19fb
    created: 1740367631053
    modified: 1742448925676
    isPrivate: false
  data:
    Cpf: "36050187102"
    Cnpj: "92891506148532"
    TooLongString: kZ7bDirtDSZz5d0iZKTBMvNsAig0zA8J5t7pZHuvjQFDNde3uPDD7m2eo3niLVrl69pcUPg5lF7Dkf7q8hVj3DTVanwgvViyjEhDq
    randomZipCode: "73884746"
    randomCity: Charlotte
    randomState: PI
    randomDistrict: West End
    randomStreet: Hill Street
    randomPhoneNumber: (418) 601-6183
    randomAddressComplement: Annex
    randomCountry: Russia
    randomNumber: 242273555
    BaseUrl: https://quality-eagles.qacoders.dev.br
    TokenAdm: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWU0MGU1YTAwMTU2MzRmMTM3ZTYiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCRqcGFsRGFZUlYuQlpTVndqM0xPYS8uQ2FxWC9CTVFzelFmNDdDZmp6dWJBTzVrRXA2anA2SyIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjU1OjQ0IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVlNDBlNWEwMDE1NjM0ZjEzN2U3In1dLCJfX3YiOjAsImlhdCI6MTc0MjQ0NTY0NSwiZXhwIjoxNzQyNTMyMDQ1fQ.sqXFPlUkccODBN_WgMb7-ORtcz5OyOA-LDdWYJmAyzs
    MailAdm: sysadmin@qacoders.com
    PasswordAdm: 1234@Test
    InvalidMail: xxxxx@yyyyy
    InvalidPassword: 1234@xxx
    TokenUser: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2RiOWM0ZGZmNDQ0NjYwNWQzZjVhMjIiLCJmdWxsTmFtZSI6IlBhdHJpY2lhIFdpbHNvbiIsIm1haWwiOiJwYXRyaWNpYXdpbHNvbkBxYWNvZGVycy5jb20uYnIiLCJwYXNzd29yZCI6IiQyYiQxMCR3MWtjYVdCRzBBb3J3aGFvbTVueGkuLzNYZjViTUxucXhlUnMyeDhCcW1vYVRvUUM3RWc3cSIsImFjY2Vzc1Byb2ZpbGUiOiJBRE1JTiIsImNwZiI6IjM2MDUwMTg3MTAyIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjY2ZGI1ZTQwZTVhMDAxNTYzNGYxMzdlNiIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoicXVpbnRhLWZlaXJhLCAyMC8wMy8yMDI1LCAwMTo0MDo0NSBCUlQiLCJyZWdpc3RyYXRpb25OdW1iZXIiOiJRYUNvZGVycy02MjM5IiwiX2lkIjoiNjdkYjljNGRmZjQ0NDY2MDVkM2Y1YTIzIn1dLCJfX3YiOjAsImlhdCI6MTc0MjQ0NTY0NSwiZXhwIjoxNzQyNTMyMDQ1fQ.IZU4i6lxMiLEPETyGrlMtWHcrCdgZKTy5TOXQ6o6tps
    FirstName: Patricia
    LastName: Wilson
    FullName: Patricia Wilson
    MailUser: patriciawilson@qacoders.com.br
    PasswordUser: 4C1dAg#%yDew
    idUser: 67bbfcc011d5ff762943fe7a
    IdUser: 67db9c4dff4446605d3f5a22
    InvalidToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2JjMDEzOTExZDVmZjc2Mjk0M2ZlYzgiLCJmdWxsTmFtZSI6IkxpbmRhIEFuZGVyc29uIiwibWFpbCI6ImxpbmRhYW5kZXJzb25AcWFjb2RlcnMuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkempPWklhRzhjQ215N2FCTGY4eDVFdXdYdThHN1ZWM1RwUGhZUmtsQjRZczZmckRkRG1Wc3UiLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiI5MjQzNTQxMjUyOSIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWU0MGU1YTAwMTU2MzRmMTM3ZTYiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InNlZ3VuZGEtZmVpcmEsIDI0LzAyLzIwMjUsIDAyOjE4OjQ5IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IlFhQ29kZXJzLTEyMjkiLCJfaWQiOiI2N2JjMDEzOTExZDVmZjc2Mjk0M2ZlYzkifV0sIl9fdiI6MCwiaWF0IjoxNzQwMzc1NzY2LCJleHAiOjE3NDA0NjIxNjZ9.liNcS79ZzWUSJsslTfU1Wojk_B0fsCpc0shIxXWoxxx
    InvalidIdUser: 67bc013911d5ff762943fabc
    IdCompany: 67db9c51ff4446605d3f7e45
    InvalidIdCompany: 67bc1e4811d5ff762944229d
